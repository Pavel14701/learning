import asyncio
import time
from typing import List, Dict, Any
import numpy as np
import pandas as pd
from infra.approximation import ApproximationModel
from infra.prepare import DataProcessor
from infra.segmentation import SegmentationModel
from infra.visual import Visualization


async def start_async(dataframe_x: pd.Series, dataframe_y: pd.Series) -> List[Dict[str, Any]]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    data_x: np.ndarray = np.asarray(dataframe_x.to_numpy(), dtype=np.float64)
    data_y: np.ndarray = np.asarray(dataframe_y.to_numpy(), dtype=np.float64)

    X, y = DataProcessor.prepare_segmentation_data(data_x, data_y)

    segmentation_model = SegmentationModel()
    await asyncio.to_thread(segmentation_model.train_async, X, y)  # üîπ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏

    segments_indices = segmentation_model.predict_segments(data_x, data_y)

    segments = [{
        "time": np.asarray(data_x[start:end + 1], dtype=np.float64),
        "velocity": np.asarray(data_y[start:end + 1], dtype=np.float64),
        "start_idx": start,
        "end_idx": end
    } for start, end in segments_indices]

    return data_x, data_y, segments


async def train_and_visualize_async(data_x: np.ndarray, data_y: np.ndarray, segments: List[Dict[str, Any]]) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"""
    
    approximation_model = ApproximationModel()
    
    # üîπ **–ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ 100 –ø–æ—Ç–æ–∫–∞—Ö**
    approx_models = await approximation_model.train_parallel_async(segments)

    visualizer = Visualization(data_x, data_y, segments, approx_models)
    visualizer.visualize_results()


# üöÄ **–ó–∞–ø—É—Å–∫ –∫–æ–¥–∞**
async def main():
    df = pd.read_excel("dataset.xlsx", skiprows=2)
    data_x = df["–í—Ä–µ–º—è, —Å"]
    data_y = df["–°–∫–æ—Ä–æ—Å—Ç—å v, –º/—Å"]
    
    start_time = time.time()

    # üîπ **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è**
    data_x, data_y, segments = await start_async(data_x, data_y)

    # üîπ **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è**
    await train_and_visualize_async(data_x, data_y, segments)

    end_time = time.time()
    print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")


if __name__ == "__main__":
    asyncio.run(main())
